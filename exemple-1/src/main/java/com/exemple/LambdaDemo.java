package com.exemple;

// Демонстрация использования простого лямбда-выражения.
// Функциональный интерфейс.
interface MyNumber {
    double getValue();
}

class LambdaDemo {
    public static void main(String[] args) {
        MyNumber myNum; // объявить ссылку на интерфейс
        // Здесь лямбда-выражение представляет собой константное выражение.
        // Когда оно присваивается myNum, конструируется экземпляр класса,
        // где лямбда-выражение реализует метод getValue() из MyNumber.
        myNum = () -> 123.45;
        // Вызвать метод getValue(), предоставляемый ранее
        // присвоенным лямбда-выражением.
        // Вызвать метод getValue(), предоставляемый ранее
        // присвоенным лямбда-выражением.
        System.out.println("Фикcиpoвaннoe значение : " + myNum.getValue());
        // Здесь используется более сложное лямбда-выражение.
        myNum = () -> Math.random() * 100;
        // В следующих операторах вызывается лямбда-выражение
        // из предыдущей строки кода.
        System.out.println("Случайное значение : " + myNum.getValue());
        System.out.println("Eщe одно случайное значение : " + myNum.getValue());
        // Лямбда-выражение должно быть совместимым с методом,
        // определенным в функциональном интерфейсе.
        // Следовательно, показанный ниже код работать не будет:
//         myNum = () -> "123.03" ; // Ошибка !
    }
}

/**
 * Фикcиpoвaннoe значение : 123.45
 * Случайное значение : 32.24853816424279
 * Eщe одно случайное значение : 21.241254160704624
 */

